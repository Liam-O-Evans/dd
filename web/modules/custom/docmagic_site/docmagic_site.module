<?php

/**
 * @file
 * Contains docmagic.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function docmagic_site_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the docmagic module.
    case 'help.page.docmagic_site':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('DocMagic') . '</p>';
      return $output;

    default:
  }
}

function docmagic_site_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id == 'contact_message_footer_newsletter_signup_form_form') {
        $form['actions']['submit']['#value'] = t('Sign Up');
        $form['actions']['submit']['#prefix'] = '<div class="submit-button-larger-wrapper"><i class="fa fa-envelope-o" aria-hidden="true"></i>';
        $form['actions']['submit']['#suffix'] = '</div>';
    }
}

/**
 * Implements hook_node_links_alter().
 */
function docmagic_site_node_links_alter(array &$links, \Drupal\node\NodeInterface $entity, array &$context) {
    // Remove statistics counter for certain pages
    if (isset($links['statistics'])) {
        //if (_can_remove_printable_links()) {
            unset($links['statistics']);
        //}
    }
    // Remove comment login for certain pages
    if (isset($links['comment__comment_node_page'])) {
        //if (_can_remove_printable_links()) {
            unset($links['comment__comment_node_page']);
        //}
    }
    if ($entity->__isset('rss_elements')) {
        if (isset($links['node']['#links']['node-readmore'])) {
            $links['node']['#links']['node-readmore']['title'] = new \Drupal\Core\StringTranslation\TranslatableMarkup('read more');
            $links['node']['#links']['node-readmore']['attributes'] = array();
            unset($links['node']['#links']['node-readmore']['language']);
            $links['#attributes'] = array();
            if (isset($links['node']['#links']['node-readmore']['url'])
                && $links['node']['#links']['node-readmore']['url'] instanceof \Drupal\Core\Url
            ) {
                $options = $links['node']['#links']['node-readmore']['url']->getOptions();
                $options['attributes']['target'] = '_blank';
                unset($options['language']);
                $links['node']['#links']['node-readmore']['url']->setOptions($options);
            }
        }
        if (isset($links['comment__comment_node_wizard'])) {
            unset($links['comment__comment_node_wizard']);
        }
    }
}

/**
 * Implements hook_ENTITY_TYPE_build_defaults_alter().
 */
function docmagic_site_node_build_defaults_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity, $view_mode)
{
    if ('teaser' == $view_mode
        && $entity instanceof \Drupal\node\Entity\Node
    ) {
        if ($entity->__isset('rss_elements')) {
            $build['#docmagic_rss_description'] = true;
            // ensure the cached rss content is different from the regular teaser content
            $build['#cache']['keys'][] = 'teaser_rss';

            $hasCategory = false;
            foreach ($entity->rss_elements as $row) {
                if (isset($row['key'])
                    && 'category' == $row['key']
                ) {
                    $hasCategory = true;
                }
            }
            if (!$hasCategory) {
                if ($entity->__isset('field_wizard')) {
                    $term = \Drupal\taxonomy\Entity\Term::load($entity->field_wizard->target_id);
                    if ($term) {
                        $category = array(
                            'key' => 'category',
                            'value' => $term->label(),
                            'attributes' => array(
                                'domain' => $term->toUrl()->setAbsolute(true)->toString(),
                            ),
                        );
                        // prepend category to list
                        array_unshift($entity->rss_elements, $category);
                    }
                }
            }
        }
    }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function docmagic_site_node_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display)
{
    if ($entity instanceof \Drupal\node\Entity\Node) {
        if ($entity->__isset('rss_elements')) {
            if (isset($build['#docmagic_rss_description'])) {
                foreach ($build as $key => $value) {
                    if (!(0 === strpos($key, '#') || 'body' == $key || 'links' == $key)) {
                        unset($build[$key]);
                    }
                }
            }
        }
    }
}

/**
 * Implements hook_entity_view().
 */
function docmagic_site_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
    // Remove print pre_links for certain pages
    if (isset($build['printable_navigation'])) {
        if (_can_remove_printable_links() || 'page' == $display->getTargetBundle() || 'full' != $view_mode) {
            unset($build['printable_navigation']);
        }
    }
}

function _can_remove_printable_links() {
    /** @var \Drupal\Core\Condition\ConditionManager $conditionManager */
    $conditionManager = \Drupal::service('plugin.manager.condition');
    $condition = $conditionManager->createInstance('request_path');
    $condition->setConfiguration(array(
        'pages' => implode("\n", array(
            '/about-us',
            '/appraisal-edelivery',
            '/automated-compliance',
            '/company',
            '/document-generation',
            '/emortgage-technology',
            '/enotary',
            '/esignature',
            '/evault',
            '/flood-determination',
            '/integration-services',
            '/investor-eqc',
            '/live-chat',
            '/loanmagic',
            '/partners',
            '/print-fulfillment',
            '/product-suggestions',
            '/product-training',
            '/professional-services',
            '/settlement-services',
            '/smartclose',
            '/solutions',
            '/support-center',
            '/total-eclose',
            '/trid-resource-center',
            '/ucd',
            '<front>',

            '/support/clean/premium',
        )),
    ));

    return $conditionManager->execute($condition);
}

/**
 * Implements hook_module_implements_alter().
 */
function docmagic_site_module_implements_alter(&$implementations, $hook) {
    if ('node_links_alter' == $hook
        || 'entity_view' == $hook
    ) {
        // move the implementations to the end so they are processed last
        $group = $implementations['docmagic_site'];
        unset($implementations['docmagic_site']);
        $implementations['docmagic_site'] = $group;
    }

    if ('node_search_result' == $hook) {
        // remove any comment output on the search results
        unset($implementations['comment']);
    }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function docmagic_site_preprocess_views_view_unformatted(&$variables) {
    $path = \Drupal::request()->getPathInfo();
    if (preg_match('`/compliance/wizard/\d+$`', $path)) {
        $originalRows = $variables['rows'];

        // disable paging and re-query results
        // @see docmagic_preprocess_pager()
        /** @var \Drupal\views\ViewExecutable $view */
        $view = $variables['view'];
        $view->pager = new \Drupal\views\Plugin\views\pager\None(array(), '', array());
        $view->pager->init($view, $view->display_handler);
        $view->query->setLimit(0);
        $view->built = false;
        $view->executed = false;
        $view->live_preview = true;
        $view->execute();

        $allRows = $view->result;
        if (count($originalRows) < count($allRows)) {
            $originalRows = $allRows;
        }

        $months = array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December');
        $newRows = array();
        $newRowLinks = array();
        foreach (array_reverse($months) as $month) {
            $newRows[$month] = array();
            $newRowLinks[$month] = '';
        }

        foreach ($originalRows as $row) {
            /** @var \Drupal\node\Entity\Node $node */
            $node = $row instanceof \Drupal\views\ResultRow ? $row->_entity : (isset($row['content']['#node']) ? $row['content']['#node'] : $row['content']['#row']->_entity);
            if ($node && 'wizard' == $node->getType()) {
                $termId = $node->field_wizard->target_id;
                $term = \Drupal\taxonomy\Entity\Term::load($termId);
                $onlyMonth = preg_replace('` \d+`', '', $term->label());
                if (!$variables['title']) {
                    $onlyYear = preg_replace('`[^\d]`', '', $term->label());
                    $variables['title'] = $onlyYear;
                }
                $newRows[$onlyMonth][$node->sticky->value][$node->getCreatedTime()][] = array('content' => $node->toLink());
                $newRowLinks[$onlyMonth] = $term->toLink();
            }
        }

        // sort decending
        foreach ($newRows as $month => $newRow) {
            foreach ($newRow as $sticky => $data) {
                krsort($newRows[$month][$sticky]);
            }
            krsort($newRows[$month]);
            if (empty($newRow)) {
                unset($newRows[$month]);
            }
        }

        $flattened = array();
        foreach ($newRows as $month => $newRow) {
            foreach ($newRow as $sticky => $data1) {
                foreach ($data1 as $created => $data2) {
                    foreach ($data2 as $data3) {
                        $flattened[$month][] = $data3;
                    }
                }
            }
        }

        $variables['compliance_wizard_rows'] = $flattened;
        $variables['compliance_wizard_row_links'] = $newRowLinks;
    }

    if (preg_match('`/compliance/faq/.+$`', $path)) {
        $originalRows = $variables['rows'];
        $variables['compliance_faq_rows'] = $originalRows;
    }

    if (preg_match('`/faq/.+$`', $path)) {
        $originalRows = $variables['rows'];

        // disable paging and re-query results
        // @see docmagic_preprocess_pager()
        /** @var \Drupal\views\ViewExecutable $view */
        $view = $variables['view'];
        $view->pager = new \Drupal\views\Plugin\views\pager\None(array(), '', array());
        $view->pager->init($view, $view->display_handler);
        $view->query->setLimit(0);
        $view->built = false;
        $view->executed = false;
        $view->live_preview = true;
        $view->execute();

        $allRows = $view->result;
        if (count($originalRows) < count($allRows)) {
            $originalRows = $allRows;
        }

        $flattened = array();

        foreach ($originalRows as $row) {
            /** @var \Drupal\node\Entity\Node $node */
            $node = $row instanceof \Drupal\views\ResultRow ? $row->_entity : (isset($row['content']['#node']) ? $row['content']['#node'] : $row['content']['#row']->_entity);
            if ($node && 'faq' == $node->getType()) {
                $termId = $node->field_faq->target_id;
                $term = \Drupal\taxonomy\Entity\Term::load($termId);
                if (!$variables['title']) {
                    $variables['title'] = $term->label();
                }
                $flattened[] = [
                    'title' => $node->getTitle(),
                    'content' => $node->get('body')->value,
                    'nid' => $node->id()
                ];
            }
        }

        $variables['faq_rows'] = $flattened;
    }
}

/**
 * Implements hook_node_update_index().
 */
function docmagic_site_node_update_index(\Drupal\node\NodeInterface $node)
{
    $text = '';

    $path = $node->toUrl('canonical', array('base_url' => ''))->toString();
    $pathInfo = \Drupal::hasRequest() ? \Drupal::request()->getPathInfo() : null;

    if ($path === $pathInfo) {
        // nothing to do
        return '';
    }

    // some blocks only appear for a specific page, so ensure that the current request matches the node URL
    $newRequest = \Symfony\Component\HttpFoundation\Request::create($path);
    $requestStack = \Drupal::requestStack();
    $requestStack->push($newRequest);

    $renderer = \Drupal::service('renderer');

    /** @var \Drupal\block\BlockRepository $blockRepository */
    $blockRepository = \Drupal::service('block.repository');
    $visibleBlocks = $blockRepository->getVisibleBlocksPerRegion();

    $gaviasBlocks = array();
    foreach ($visibleBlocks as $region => $blocks) {
        if ('content' == $region) {
            foreach ($blocks as $blockName => $block) {
                /** @var \Drupal\block\Entity\Block $block */
                if (false !== strpos($blockName, 'gavias')) {
                    $gaviasBlocks[$blockName] = $renderer->executeInRenderContext(
                        new \Drupal\Core\Render\RenderContext(),
                        function () use ($block) {
                            return $block->getPlugin()->build();
                        }
                    );
                }
            }
        }
    }

    // remove the $newRequest value
    $requestStack->pop();

    foreach ($gaviasBlocks as $blockName => $blockBuild) {
        if (isset($blockBuild['#content'])) {
            $text .= $blockBuild['#content'];
        }
    }

    return $text;
}
