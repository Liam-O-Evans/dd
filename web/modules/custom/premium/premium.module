<?php 
// $Id: premium.module,v 1.17 2009/01/13 19:16:42 jerdavis Exp $

/**
 * @file Restrict access to the full body of premium content
 */

/**
 * Implementation of hook_menu()
 */
function premium_menu() {
  $items = array();
  $items['admin/settings/premium'] = array(
    'title' => 'Premium',
    'description' => 'Settings for access control to premium content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('premium_settings'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}
 
/**
 * Implementation of hook_perm()
 */
function premium_perm() {
  return array('access premium content');
}

/**
 * Implementation of hook_cron()
 */
function premium_cron() {
  /*
  // ndr - prevent mass delete for now, expiration doesn't seem to be used either
  $ts = time();
  db_query("DELETE FROM {premium} WHERE start_ts < ? AND end_ts <> 0 AND end_ts < ?", array($ts, $ts));
  */
}

/**
 * Implementation of hook_nodeapi()
 */
function premium_nodeapi(&$node, $op, $teaser) {
  $node->premium = _premium_node($node);
  $node->premium_access = _premium_access($node, $teaser);

  switch ($op) {
    case 'load':
      return array(
        'premium' => $node->premium,
        'premium_access' => $node->premium_access);
    
    case 'insert':
    case 'delete':
    case 'update': 
      _premium_set_premium($node, $node->premium);
      return;
      
    case 'view':
      if (!$node->premium_access) {
        $node->content['body']['#value'] = theme_premium_body($node);// \Drupal::theme()->render('premium_body', array('node' => $node));

      }
      return;
  }
  return;
}

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function premium_node_load(array $entities)
{
    foreach ($entities as $entity) {
        premium_nodeapi($entity, 'load', '');
    }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function premium_node_insert(Drupal\Core\Entity\EntityInterface $entity)
{
    premium_nodeapi($entity, 'insert', '');
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function premium_node_delete(Drupal\Core\Entity\EntityInterface $entity)
{
    premium_nodeapi($entity, 'delete', '');
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function premium_node_update(Drupal\Core\Entity\EntityInterface $entity)
{
    premium_nodeapi($entity, 'update', '');
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function premium_node_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display)
{
    premium_nodeapi($entity, 'view', '');

    if (isset($entity->content['body']['#value']) && $entity->content['body']['#value']) {
        $build['body'][0]['#text'] = $entity->content['body']['#value'];
    }
}

/**
 * Implementation of hook_node_operations().
 */
function premium_node_operations() {
  $operations = array(
    'premium' => array(
      'label' => t('Set premium status'),
      'callback' => '_premium_node_operations_premium',
      'callback arguments' => array(1),
    ),
    'unpremium' => array(
      'label' => t('Remove premium status'),
      'callback' => '_premium_node_operations_premium',
      'callback arguments' => array(0),
    ),
  ); 
  return $operations;
}

/**
 * Callback for hook_node_operations()
 */
function _premium_node_operations_premium($nids, $premium = 0) {
  foreach ($nids as $nid) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
    _premium_set_premium($node, $premium);
  }
}

/**
 * Implementation of hook_form_alter()
 * 
 * Add the Premium checkbox to the node editing options and default settings
 * The Premium flag will behave like other options (published, promote, etc)
 */
function premium_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $type = isset($form['type']) && isset($form['type']['#value']) ? $form['type']['#value'] : 'page'; // @TODO proper default
  $title = t('Access restricted for non-premium users');
  switch ($form_id) {
    
    case 'node_type_form':
      $form['workflow']['node_options']['#options']['premium'] = $title;
      if (_premium_node($type)) {
        $form['workflow']['node_options']['#default_value'][] = 'premium';
      }
      return;
      
    case $type .'_node_form':
      if (\Drupal::currentUser()->hasPermission('administer nodes')) {
        $node = $form['#node'];
        $form['options']['premium'] = array(
          '#type' => 'checkbox', 
          '#title' => $title, 
          '#default_value' => _premium_node($node),
        );
      }
      return;
  }

  if ($form_state->getFormObject() instanceof \Drupal\node\NodeForm) {
      if (\Drupal::currentUser()->hasPermission('administer nodes')) {
          $node = $form_state->getFormObject()->getEntity();
          $values = $form_state->getUserInput();
          if (isset($values['premium']) && $values['premium'] == 1) {
              $node->premium = 1;
          }
          $form['options']['premium'] = array(
              '#type' => 'checkbox',
              '#title' => $title,
              '#default_value' => _premium_node($node),
          );
      }
      return;
  }
}

/**
 * Settings form
 */
function premium_settings() {
  $form = array();
  $form['#validate'] = array('premium_settings_validate'); 

  $premium_types = array();
  foreach (node_type_get_names() as $type => $value) {
    if (_premium_node($type)) {
      $premium_types[$type] = $type; 
    } 
    else {
      $premium_types[$type] = 0;
    }
  }

  $form['premium_node_types'] = array(
    '#type' => 'checkboxes',
    '#options' => node_type_get_names(),
    '#title' => t('Node Types'),
    '#default_value' => $premium_types,
  );

  // timeframe for premium + update existing nodes
  $form['premium_mode'] = array(
    '#type'          => 'radios', 
    '#title'         => t('Mode'), 
    '#default_value' => \Drupal::config('premium.settings')->get('premium_mode'), 
    '#options'       => array(
      '0' => t('Premium items are permanently restricted'), 
      'archive' => t('Protect archives only: Items switch to premium status after a specified period'), 
      'latest' => t('Protect latest content only: Items switch to non-premium status after a specified period'), 
    ),
  );
  
  $options = (range(0, 15));
  unset($options[0]);
  $form['premium_time_count'] = array(
    '#type'          => 'select', 
    '#title'         => t('Count'), 
    '#default_value' => \Drupal::config('premium.settings')->get('premium_time_count'), 
    '#options'       => $options,
  );
  
  $form['premium_time_unit'] = array(
    '#type'          => 'select', 
    '#title'         => t('Unit'), 
    '#default_value' => \Drupal::config('premium.settings')->get('premium_time_unit'), 
    '#options'       => array('D' => t('Days'), 
        'W' => t('Weeks'), 
        'M' => t('Months'), 
        'Y' => t('Years')), 
  );

  $form['premium_bulk_update'] = array(
    '#type' => 'checkbox',
    '#title' => t('Bulk update premium status'),
    '#description' => t('Update all existing nodes of the types selected above with the new premium settings.'),
  );
  
  $form['premium_message'] = array(
    '#type'          => 'textarea', 
    '#title'         => t('Premium body text'), 
    '#default_value' => \Drupal::config('premium.settings')->get('premium_message'),
    '#cols'          => 60, 
    '#rows'          => 15, 
    '#description'   => t('When a visitor doesn\'t have access to a premium item they will see this message instead of its full text')
  );

  if (\Drupal::moduleHandler()->moduleExists('filter')) {
    // @TODO change filter_form()
//    $form['premium_format'] = filter_form(\Drupal::config('premium.settings')->get('premium_format'), NULL, array('premium_format'));
  }
  // @TODO change system_settings_form()
//  return system_settings_form($form);
  return $form;
}

/**
 * Save premium status as set on admin/settings/premium to each type 
 */
function premium_settings_validate($form, &$form_state) {
  $count = $form_state['values']['premium_time_count'];
  $unit  = $form_state['values']['premium_time_unit'];
  $mode  = $form_state['values']['premium_mode'];
  $types = $form_state['values']['premium_node_types'];

  foreach ($types as $type => $premium) {
    $node_options = \Drupal::config('node.type.'.$type)->get('options') ?: array();
    if (in_array('premium', $node_options)) {
      $premium_key = array_search('premium', $node_options);
      unset($node_options[$premium_key]);
    }
    if ($types[$type]) { 
      $node_options = array_merge($node_options, array('premium'));
      $premium_types[] = $types[$type];
    } 
    \Drupal::configFactory()->getEditable('node.type.'.$type)->set('options', $node_options)->save();
  }

  /*
  // ndr - prevent mass delete for now
  if ($form_state['values']['premium_bulk_update']) {
    db_query("DELETE from {premium}");

    foreach ($premium_types as $type) {
      $start = $end = 0;
      _premium_offset(0, $start, $end, $mode, $count, $unit);
      // Apply the timestamp delta's to the node's created date.
      if ($start) $start = 'created + '. (int) $start;
      if ($end) $end = 'created + '. (int) $end;

      db_query("INSERT INTO {premium} (nid, start_ts, end_ts)
        SELECT nid, $start, $end FROM {node} WHERE type = ?", array($type));
     }
  }
  */
}

/**
 * Calculate time offset for auto-aging / auto-archiving
 */
function _premium_offset($timestamp, &$start_ts, &$end_ts, $mode, $count, $unit) {

  // If the timestamp is zero, set it to "now" so mktime() will work properly.
  $ts = $timestamp ? $timestamp : time();
  $offset = mktime(
    date('H', $ts)+($unit=='H')*$count, 0, 0, 
    date('m', $ts)+($unit=='M')*$count,
    date('d', $ts)+($unit=='D')*$count+($unit=='W')*$count*7, 
    date('y', $ts)+($unit=='Y')*$count
  );

  // If we faked a timestamp, remove it.
  if ($ts != $timestamp) $offset -= $ts; 

  if ($mode == 'archive') $start_ts = $offset;
  if ($mode == 'latest') $end_ts = $offset;
  return;
}

/**
 * Establish premium settings for a node or node type
 */
function _premium_node($node) {
  // This is a node type: use default settings
  if (is_string($node)) {
    return in_array('premium', \Drupal::config('node.type.'.$node)->get('options') ?: array());
  }

  // Already has a value.
  if (isset($node->premium)) return $node->premium;

  if ($node->nid->value) {
    // Attempt to find the value from the premium table.
    return (int) db_result(db_query("SELECT 1 FROM {premium}  WHERE nid = ?
      AND (( start_ts = 0 and end_ts > ?)
      OR ( start_ts < ? AND end_ts = 0)
      OR ( start_ts = 0 AND end_ts = 0))", array($node->nid->value, time(), time())));
  }

  // Use default settings for this node type.
  // return in_array('premium', \Drupal::config('node.type.'.$node->type)->get('options') ?: array());
   return false; // Do not apply checkbox by default
}

/**
 * Establish premium visibility settings for a node
 */
function _premium_access($node, $teaser) {

  $query_str = parse_url(isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : '', PHP_URL_QUERY);

  $ignore = FALSE;
  parse_str($query_str, $query_params);
  if (isset($query_params['clean']) && $query_params['clean'] == 'dde') {
    $ignore = TRUE;
  }

  // per a parameter in the url, ignore premium requirements
  if ($ignore) {
    return TRUE;
  }

  // validation happens more than once, let's only verify if we have permissions to test against
  if (is_null($node->premium_access)) {
    //watchdog('premium', 'returning TRUE (due to null check)');
    return TRUE;
  }    

  // the definitive test to verify that a user has a given permission (based on roles)
  // /admin/user/permissions/
  //watchdog('premium', 'access premium content PERMISSION', \Drupal::currentUser()->hasPermission('access premium content'));
  //watchdog('premium', 'access premium_basic content PERMISSION', \Drupal::currentUser()->hasPermission('access premium_basic content'));

  //if (isset($node->premium_access)) {
  //  //watchdog('premium', 'in A', $node->premium_access);
  //  return $node->premium_access;
  //}

  $user = \Drupal::currentUser();

  // Access is granted or revoked explicitly.
  foreach (\Drupal::moduleHandler()->getImplementations('premium_access') as $name) {
    //watchdog('premium', 'explicit access');
    $function = $name .'_premium_access';
    if (is_bool($access = $function($user, $node))) {
      //watchdog('premium', 'returning access variable', $access);
      return $access;
    }
  }

  // Not viewing the body, or it's not premium, or user has privileges.
  if ($teaser || !$node->premium || \Drupal::currentUser()->hasPermission('access premium content')) {
    return TRUE;
  } else if ($node->premium_basic) { // Still validating, let's also validate for 'premium_basic'
    if (\Drupal::currentUser()->hasPermission('access premium_basic content')) { // _premium_basic_access($node, $teaser)
      return TRUE;
    }
  }

  // There were no conditions met that defined we could access the node. 
  return FALSE;
}
 
/**
 * Update the premium table with appropriate premium values for a node.
 */
function _premium_set_premium($node, $premium = FALSE) {
  db_query('DELETE FROM {premium} WHERE nid = ?', array($node->nid->value));
  if ($premium) {
    $start_ts = $end_ts = 0 ;
    $mode = \Drupal::config('premium.settings')->get('premium_mode');
    $count = \Drupal::config('premium.settings')->get('premium_time_count');
    $unit = \Drupal::config('premium.settings')->get('premium_time_unit');
    _premium_offset($node->created->value, $start_ts, $end_ts, $mode, $count, $unit);
    db_query('INSERT INTO {premium} (nid, start_ts, end_ts) 
              VALUES ( ?, ?, ? )', array($node->nid->value, $start_ts, $end_ts));
  }
}

/**
 * Implementation of hook_theme().
 */
function premium_theme() {
  return array(
    'premium_body' => array(
      'arguments' => array('node' => NULL),
    ),
  );
}

/**  (CUSTOM)
 * Reformat the message body with a premium content message
 */
function theme_premium_body($node) {
  $user = \Drupal::currentUser();
//  $teaser = check_markup($node->teaser, $node->format, FALSE);
//  $body = check_markup($node->body, $node->format, FALSE);
  $teaser = check_markup($node->body->summary, $node->body->format, FALSE);
  $body = check_markup($node->body->value, $node->body->format, FALSE);
  if ($teaser == $body) { // we need to create our own teaser (vs displaying the entire article)
    //do this via the paragraph element
    $needle = '<p>';
    $count = substr_count(strtolower($body), $needle);
    //...or do it via a table element (we start with a table)
    $tableStart = strpos(strtolower($body), '<table'); 
    //...or show nothing if we are displaying a FAQ page
    $faqPage = strpos(strtolower($_SERVER['REQUEST_URI']), '/compliance/faq'); 
    //$dom = new DOMDocument; // another way to get the count. but let's get actual defined elements instead of those that 'appear' in the DOM (since we are manipulating the same)
    //$dom->loadHTML($body);
    //$count = $dom->getElementsByTagName('p')->length;
    if ($faqPage !== false && $faqPage == 0) {
      return 'The full text is available to subscribers only. Please <a href="/compliance/faq">click here</a> to log in.';
    } elseif ($tableStart !== false && $tableStart == 0) {
      $teaser = '';
    } elseif ($count >= 2) { // we'll only force a teaser if we have more than one paragraph defined in the html
      $pos = strpos_offset($needle, strtolower($body), 2); // get the location of the second element
      $teaser = substr($body, 0, $pos); // and remove everything from that point to the end
      //return $teaser;
    } else { // there is not enough content that proves the premium 'link' relevant
      return $body;
    }
  }
  // this is the default behavior provided by the module (here our node provides us with a legit teaser)
  return $teaser . check_markup(\Drupal::config('premium.settings')->get('premium_message'), \Drupal::config('premium.settings')->get('premium_format'), FALSE);
}

/**  (CUSTOM)
 * Find position of Nth $occurrence of $needle in $haystack
 * Starts from the beginning of the string
**/
function strpos_offset($needle, $haystack, $occurrence) {
  // explode the haystack
  $arr = explode($needle, $haystack);
  // check the needle is not out of bounds
  switch( $occurrence ) {
    case $occurrence == 0:
      return false;
    case $occurrence > max(array_keys($arr)):
      return false;
    default:
      return strlen(implode($needle, array_slice($arr, 0, $occurrence)));
  }
}
