services:
  # What to call the service hosting the site.
  php:
    # Use PHP 7.x with Apache; this syntax pulls in the latest version of PHP 7
    image: tugboatqa/php:7-apache

    # Set this as the default service. This does a few things
    #   1. Clones the git repository into the service container
    #   2. Exposes port 80 to the Tugboat HTTP proxy
    #   3. Routes requests to the preview URL to this service
    default: true

    # Wait until the

    depends: mysql

    # A set of commands to run while building this service
    commands:
      # Commands that set up the basic preview infrastructure
      init:
        # Install opcache and mod-rewrite.
        - docker-php-ext-install opcache
        #- sudo apt-get install php-zip
        #- sudo apt-get install -y zlib1g-dev
        #- sudo apt-get install -y libzip-dev
        #- sudo apt-get install -y zip
        #- docker-php-ext-configure zip
        #- docker-php-ext-install zip
        - a2enmod headers rewrite
        #- php --version
        #- sudo apt-get update
        #- sudo apt-get install software-properties-common
        #- sudo add-apt-repository ppa:ondrej/<repository>
        #- sudo add-apt-repository ppa:ondrej/php
        #- sudo apt-get update
        #- sudo apt-get install php7.4-zip
        #- sudo apt-get install libz-dev -y
        #- pecl install zlib zip
      
        #- sudo apt-get install php-zip

        # Link the document root to the expected path. This example links /web
        # to the docroot.
        - ln -snf "${TUGBOAT_ROOT}/web" "${DOCROOT}"

        # Create the Drupal private and public files directories if they aren't
        # already present.
        - mkdir -p "${TUGBOAT_ROOT}/files-private" "${DOCROOT}/sites/default/files"

        # A common practice in many Drupal projects is to store the config and
        # private files outside of the Drupal root. If that's the case for your
        # project, you can either specify the absolute paths to those
        # directories in your settings.local.php, or you can symlink them in
        # here. Here is an example of the latter option:
        - ln -snf "${TUGBOAT_ROOT}/config" "${DOCROOT}/../config"
        - ln -snf "${TUGBOAT_ROOT}/files-private" "${DOCROOT}/../files-private"
        - wget -O /usr/local/bin/drush https://github.com/drush-ops/drush-launcher/releases/download/0.6.0/drush.phar
        - chmod +x /usr/local/bin/drush
        - echo "memory_limit = 4G" >> /usr/local/etc/php/conf.d/my-php.ini
       
        - composer self-update --2
      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Use the tugboat-specific Drupal settings.
        - cp "${TUGBOAT_ROOT}/.tugboat/settings.local.php" "${DOCROOT}/sites/default/"
        - cp -R "${TUGBOAT_ROOT}/config/" "//var"


        # Install/update packages managed by composer, including drush.
        - composer install --optimize-autoloader

        # Copy Drupal's public files directory from an external server. The
        # public SSH key found in the Tugboat Repository configuration must be
        # copied to the external server in order to use rsync over SSH.
        #- rsync -av --delete user@example.com:/path/to/files/ "${DOCROOT}/sites/default/files/"

        # Alternatively, another common practice is to use the
        # stage_file_proxy Drupal module. This module lets Drupal serve
        # files from another publicly-accessible Drupal site instead of
        # syncing the entire files directory into the Tugboat Preview.
        # This results in smaller previews and reduces the build time.
        - composer require --dev drupal/stage_file_proxy
        - composer require drush/drush
        
        #- composer require drupal/clipboardjs
        # Set file permissions such that Drupal will not complain.
        - chgrp -R www-data "${DOCROOT}/sites/default/files"
        - find "${DOCROOT}/sites/default/files" -type d -exec chmod 2775 {} \;
        - find "${DOCROOT}/sites/default/files" -type f -exec chmod 0664 {} \;
        - drush --yes --db-url=mysql://tugboat:tugboat@mysql:3306/tugboat --account-name=admin --account-pass=admin site:install standard
        
        
        
        - wget https://tulepond.sfo3.digitaloceanspaces.com/drupal.sql
        #- drush pm:enable --yes workspaces
        
        - drush -y sql-drop
        - drush sql-cli < drupal.sql
        #- echo "$config['system.logging']['error_level'] = 'verbose';" >> /var/lib/tugboat/web/sites/default/settings.php
        - drush config-delete field.storage.node.field_block_builder
        - drush config-delete field.field.node.page.field_block_builder
        - drush config-delete field.storage.node.simplenews_issue
        - drush config-delete field.storage.simplenews_subscriber.subscriptions
        - drush config-set system.theme admin seven
                                   
        #- composer require drupal/zurb_foundation:^6.0@alpha
        #- drush pm:uninstall cas
        #- drush dl -y zurb_foundation
        #- drush en -y zurb_foundation
        - drush config-set system.theme default bartik -y
        
        #- drush pm:uninstall printable
        #- drush pm:uninstall ldap
        #- drush pm:uninstall ldap_user
        #- drush pm:uninstall ldap_query
        #- drush updatedb -y
        #- drush cache:rebuild
        #- grep -rn 'path.alias_manager' ${DOCROOT}/modules/contrib/
        #- drush cbdl
        #- drush -y config-export
        #- drush -y config-import
        #- drush cr discovery
        #- drush eval "drupal_flush_all_caches();"
        #- drush ev "\Drupal::configFactory()->getEditable('core.extension')->set('profile', 'standard')->save();"
        #- drush eval "\Drupal::service('extension.list.module')->reset()->getList();"
        - drush cdel core.extension module.premium
        - drush cdel core.extension module.pathologic
        #- drush cdel core.extension module.views_data
        - drush cdel core.extension module.gavias_blockbuilder
        - drush cdel core.extension module.cas
        - drush cdel core.extension module.cas_attributes
        - drush cdel core.extension module.gavias_hook_themer
        - drush cdel core.extension module.gavias_sliderlayer
        - drush cdel core.extension module.gavias_view
        - drush cdel core.extension module.gaviasthemer
        - drush cdel core.extension module.gva_render_shortcode
        - drush cdel core.extension module.seo_checklist
        - drush cdel core.extension module.checklistapi
        - drush cdel core.extension module.docmagic_cas
        - drush cdel core.extension module.simplenews
        - drush cdel core.extension module.entityqueue
        - drush cdel core.extension module.externalauth
        - drush cdel core.extension module.checklistapi
        - drush cdel core.extension module.docmagic_site
        - drush cdel core.extension module.premium_basic
        - drush cdel core.extension module.premium_download
        - drush cdel core.extension module.replication
        - drush cdel core.extension module.workflow
        - drush cdel core.extension module.redirect
        - drush cdel core.extension module.authorization
        - drush cdel core.extension module.ldap
        - drush cdel core.extension module.ldap_user
        - drush cdel core.extension module.ldap_authorization
        - drush cdel core.extension module.ldap_authentication
        - drush cdel core.extension module.ldap_servers
        - drush cdel core.extension module.memcache
        #- drush cdel core.extension module.views_data
        - drush cdel core.extension module.memcache_storage
        - drush cdel core.extension module.multiversion
        - drush cdel core.extension module.nodequeue_migrate
        - drush cdel core.extension module.printable
        - drush cdel core.extension module.pathauto
        - drush cdel core.extension module.clipboardjs
        - drush cdel core.extension module.workspace
        - drush cdel core.extension module.features_kiamo
        - drush cdel core.extension module.conflict
        - drush cdel core.extension module.deploy
        - drush cdel core.extension module.docmagic_compliance_newsletter
        - drush cdel core.extension module.docmagic_migrate
        - drush cdel core.extension module.docmagic_migrate_content
        - drush cdel core.extension module.docmagic_migrate_views
        - drush cdel core.extension module.key_value
        - drush pm:enable --yes stage_file_proxy
        - drush config:set --yes stage_file_proxy.settings origin "http://www.docmagic.com"
        - drush uli admin/content
        #- drush updatedb -y
        - drush cache:rebuild
        #- drush updatedb -y
        - ls
        - pwd
        - cd ../../ | ls
        - php -i | grep php.ini
        #- cd apache2
        #- tail -f //var/log/apache2/error.log
        #- drush config-import --source=//var/config
      # Commands that build the site. This is where you would add things
      # like feature reverts or any other drush commands required to
      # set up or configure the site. When a preview is built from a
      # base preview, the build workflow starts here, skipping the init
      # and update steps, because the results of those are inherited
      # from the base preview.
      build:
        #- composer global require consolidation/cgr
        - composer require drush/drush
        - export PATH="$HOME/.composer/vendor/bin:$PATH"
        #- source ~/.profile
        #- cgr drush/drush
        #- wget -O drush.phar https://github.com/drush-ops/drush-launcher/releases/latest/download/drush.phar
        #- chmod +x drush.phar
        #- sudo mv drush.phar /usr/local/bin/drush
        
        - composer install --optimize-autoloader
       
        #- composer global update
        #- vendor/bin/drush cache:rebuild
        #- vendor/bin/drush config:import -y
       
        #- drush updatedb -y
        #- vendor/bin/drush cache:rebuild

  # This 'mysql' key acts as the hostname to access the service by from the php service.
  mysql:
    # Use the latest available 5.x version of MySQL
    image: tugboatqa/mariadb:10.5

    # A set of commands to run while building this service
    commands:
      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Copy a database dump from an external server. The public
        # SSH key found in the Tugboat Repository configuration must be
        # copied to the external server in order to use scp.
        #- scp user@example.com:database.sql.gz /tmp/database.sql.gz
        #- zcat /tmp/database.sql.gz | mysql tugboat
        #- rm /tmp/database.sql.gz
